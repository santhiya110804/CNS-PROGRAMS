#include <stdio.h>
#include <string.h>
#include <ctype.h>

void encrypt(char *plaintext, char *key);
void decrypt(char *ciphertext, char *key);

int main() {
    char plaintext[1000];
    char ciphertext[1000];
    char key[100];

    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);

    printf("Enter key: ");
    fgets(key, sizeof(key), stdin);

    plaintext[strcspn(plaintext, "\n")] = '\0';
    key[strcspn(key, "\n")] = '\0';

    encrypt(plaintext, key);
    printf("Encrypted text: %s\n", plaintext);

    decrypt(plaintext, key);
    printf("Decrypted text: %s\n", plaintext);

    return 0;
}

void encrypt(char *plaintext, char *key) {
    int i, j;
    int keyLen = strlen(key);
    for (i = 0, j = 0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) {
            char base = isupper(plaintext[i]) ? 'A' : 'a';
            int shift = tolower(key[j % keyLen]) - 'a';
            plaintext[i] = base + (plaintext[i] - base + shift) % 26;
            j++;
        }
    }
}

void decrypt(char *ciphertext, char *key) {
    int i, j;
    int keyLen = strlen(key);
    for (i = 0, j = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            int shift = tolower(key[j % keyLen]) - 'a';
            ciphertext[i] = base + (ciphertext[i] - base - shift + 26) % 26;
            j++;
        }
    }
}
